name: Build HRMS Image

on:
  schedule:
    - cron: '45 20 * * *'      # 02:15 IST daily
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 15)'
        required: false
        default: '15'
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY_USER: robinfk
  FRAPPE_VERSION: version-${{ github.event.inputs.version || '15' }}
  ERPNEXT_VERSION: version-${{ github.event.inputs.version || '15' }}
  HRMS_VERSION: version-${{ github.event.inputs.version || '15' }}
  PYTHON_VERSION: 3.10.12
  NODE_VERSION: 18.12.0

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    services:
      registry:
        image: docker.io/registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
          platforms: linux/${{ matrix.arch }}
      
      - name: Prepare apps.json and patch Containerfile
        run: |
          # Create HRMS apps.json
          cat > apps.json <<EOF
          [
            {
              "url": "https://github.com/frappe/frappe",
              "branch": "${{ env.FRAPPE_VERSION }}"
            },
            {
              "url": "https://github.com/frappe/erpnext",
              "branch": "${{ env.ERPNEXT_VERSION }}"
            },
            {
              "url": "https://github.com/frappe/hrms",
              "branch": "${{ env.HRMS_VERSION }}"
            },
            {
              "url": "https://github.com/shridarpatil/frappe_whatsapp",
              "branch": "master"
            },
            {
              "url": "https://github.com/frappe/lms",
              "branch": "main"
            },
            {
              "url": "https://github.com/frappe/helpdesk",
              "branch": "main"
            },
            {
              "url": "https://github.com/frappe/crm",
              "branch": "main"
            }
          ]
          EOF
          
          # Base64 encode apps.json for build arg
          APPS_JSON_B64=$(base64 -w0 apps.json)
          echo "APPS_JSON_B64=$APPS_JSON_B64" >> $GITHUB_ENV
          
          # Patch Containerfile to avoid interactive prompts
          if [ -f "images/custom/Containerfile" ]; then
            # Add --yes flag to bench init
            sed -i 's/bench init \${APP_INSTALL_ARGS}/bench init --yes \${APP_INSTALL_ARGS}/g' images/custom/Containerfile
            echo "Modified Containerfile to avoid interactive prompts"
          else
            echo "Error: images/custom/Containerfile not found"
            find . -name "Containerfile" | sort
            exit 1
          fi
      
      - name: Build to local registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: images/custom/Containerfile
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            localhost:5000/${REGISTRY_USER}/hrms:v${{ github.event.inputs.version || '15' }}
          build-args: |
            FRAPPE_PATH=https://github.com/frappe/frappe
            FRAPPE_BRANCH=${{ env.FRAPPE_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
            APPS_JSON_BASE64=${{ env.APPS_JSON_B64 }}
      
      - name: Test image
        if: matrix.arch == 'amd64'
        run: |
          # Pull the image from the local registry
          docker pull localhost:5000/${REGISTRY_USER}/hrms:v${{ github.event.inputs.version || '15' }}
          
          # Run a simple test
          docker run --rm localhost:5000/${REGISTRY_USER}/hrms:v${{ github.event.inputs.version || '15' }} bash -c "echo 'Testing image' && ls -la /home/frappe/frappe-bench/apps"

  push:
    name: Push
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() }}
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Create and push multi-arch manifest
        run: |
          # Create manifest for version tag
          docker buildx imagetools create -t ${REGISTRY_USER}/hrms:v${{ github.event.inputs.version || '15' }} \
            localhost:5000/${REGISTRY_USER}/hrms:v${{ github.event.inputs.version || '15' }}
          
          # Create manifest for latest tag
          docker buildx imagetools create -t ${REGISTRY_USER}/hrms:latest \
            localhost:5000/${REGISTRY_USER}/hrms:v${{ github.event.inputs.version || '15' }}
      
      - name: Workflow summary
        run: |
          echo "ðŸŸ¢ Successfully built and pushed ${REGISTRY_USER}/hrms:v${{ github.event.inputs.version || '15' }} (multi-arch)"
          echo "ðŸŸ¢ Also tagged as ${REGISTRY_USER}/hrms:latest"
